name: Fetch and Clean RSS Feed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
      ​  uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install lxml requests beautifulsoup4

      - name: Fetch and Clean RSS Feed
        run: |
          python3 << 'EOF'
          import requests
          from lxml import etree
          from bs4 import BeautifulSoup
          from datetime import datetime, timezone
          import re

          print("Fetching original feed...")
          # Source feed from rss.app
          response = requests.get('https://rss.app/feeds/PnXLTXpDQSdLv1cb.xml')
          root = etree.fromstring(response.content)
          channel = root.find('channel')
          items = channel.findall('item')[:8]

          nsmap = {
              'content': 'http://purl.org/rss/1.0/modules/content/',
              'wfw': 'http://wellformedweb.org/CommentAPI/',
              'dc': 'http://purl.org/dc/elements/1.1/',
              'atom': 'http://www.w3.org/2005/Atom',
              'sy': 'http://purl.org/rss/1.0/modules/syndication/',
              'slash': 'http://purl.org/rss/1.0/modules/slash/',
              'media': 'http://search.yahoo.com/mrss/',
              'snf': 'http://www.smartnews.be/snf'
          }
          for prefix, uri in nsmap.items():
              etree.register_namespace(prefix, uri)

          # Use your provided logo URL
          logo_url = 'https://i.ibb.co/sptKgp34/CTV-Feed-Logo.png'
          fallback_thumbnail = logo_url  # can still use the logo as thumbnail fallback

          xml_parts = []
          xml_parts.append('<?xml version="1.0" encoding="UTF-8"?>')
          xml_parts.append('<rss version="2.0"')
          xml_parts.append(' xmlns:content="http://purl.org/rss/1.0/modules/content/"')
          xml_parts.append(' xmlns:wfw="http://wellformedweb.org/CommentAPI/"')
          xml_parts.append(' xmlns:dc="http://purl.org/dc/elements/1.1/"')
          xml_parts.append(' xmlns:atom="http://www.w3.org/2005/Atom"')
          xml_parts.append(' xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"')
          xml_parts.append(' xmlns:slash="http://purl.org/rss/1.0/modules/slash/"')
          xml_parts.append(' xmlns:media="http://search.yahoo.com/mrss/"')
          xml_parts.append(' xmlns:snf="http://www.smartnews.be/snf">')
          xml_parts.append('<channel>')

          # Insert logo at channel level
          xml_parts.append(f'<snf:logo><url>{logo_url}</url></snf:logo>')
          print(f"✓ Added logo at start of channel: {logo_url}")

          # Copy channel metadata (exclude any existing logos)
          for elem in channel:
              if elem.tag == 'item':
                  break
              if 'logo' not in elem.tag.lower():
                  xml_parts.append(etree.tostring(elem, encoding='unicode', method='xml'))

          cdata_count = 0

          def fetch_featured_image(article_url):
              try:
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (compatible; SmartFeed-Builder/3.0)',
                      'Accept': 'text/html'
                  }
                  response = requests.get(article_url, headers=headers, timeout=10)
                  if not response.ok:
                      return None

                  html = response.text
                  candidates = []
                  og_matches = re.findall(r'<meta[^>]+property=["\']og:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
                  candidates.extend(og_matches)
                  twitter_matches = re.findall(r'<meta[^>]+name=["\']twitter:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
                  candidates.extend(twitter_matches)
                  article_matches = re.findall(r'<meta[^>]+property=["\']article:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
                  candidates.extend(article_matches)

                  for img_url in candidates:
                      filename = img_url.lower().split('/')[-1]
                      if 'logo' in filename or 'icon' in filename:
                          continue
                      if any(size in img_url.lower() for size in ['150x150', '100x100', '50x50']):
                          continue
                      if 'watch-' in filename or filename.endswith('.webp'):
                          return img_url
                      return img_url

                  if candidates:
                      return candidates[0]
                  return None
              except Exception as e:
                  print(f"    ! Error: {e}")
              return None

          for idx, item in enumerate(items):
              title_text = item.find('title').text if item.find('title') is not None else 'Unknown'
              print(f"\nItem {idx+1}: {title_text[:50]}")

              xml_parts.append('<item>')

              original_content = None
              description_content = None
              article_link = None

              # Extract link, content:encoded (if present), and description
              for elem in item:
                  tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                  namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None

                  if elem.tag == 'link':
                      article_link = elem.text.split('?')[0] if elem.text else None

                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      original_content = elem.text or ''
                  if tag_name == 'description':
                      description_content = elem.text or ''

              # Copy elements except media:thumbnail and any existing content:encoded (we'll add our own)
              for elem in item:
                  tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                  namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None
                  if namespace == 'http://search.yahoo.com/mrss/':
                      continue  # skip existing thumbnails
                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      continue  # skip existing content:encoded
                  xml_parts.append(etree.tostring(elem, encoding='unicode', method='xml'))

              # Determine what to use for <content:encoded>
              content_html = original_content or description_content or ''
              if content_html:
                  soup = BeautifulSoup(content_html, 'html.parser')
                  links = soup.find_all('a')
                  if len(links) > 3:
                      for link in links[3:]:
                          link.unwrap()
                  content_html = str(soup)
                  xml_parts.append(f'<content:encoded><![CDATA[{content_html}]]></content:encoded>')
                  cdata_count += 1
              else:
                  xml_parts.append('<content:encoded><![CDATA[]]></content:encoded>')

              # Ensure required dc:creator and pubDate are present
              if item.find('dc:creator', nsmap) is None:
                  xml_parts.append('<dc:creator>CableTV.com</dc:creator>')
              if item.find('pubDate') is None:
                  xml_parts.append(f'<pubDate>{datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S +0000")}</pubDate>')

              # Fetch or fallback a thumbnail
              featured_image = None
              if article_link:
                  featured_image = fetch_featured_image(article_link)
              if not featured_image:
                  featured_image = fallback_thumbnail
              # Sanitize relative URLs
              if not featured_image.startswith('http'):
                  if featured_image.startswith('//'):
                      featured_image = 'https:' + featured_image
                  elif featured_image.startswith('/'):
                      featured_image = 'https://www.cabletv.com' + featured_image
              featured_image = featured_image.replace('&', '&amp;')
              xml_parts.append(f'<media:thumbnail url="{featured_image}"/>')
              xml_parts.append('</item>')

          xml_parts.append('</channel></rss>')
          # Ensure our output feed self-references the GitHub-hosted feed rather than the source feed
          xml_string = ''.join(xml_parts).replace(
              'https://rss.app/feeds/PnXLTXpDQSdLv1cb.xml',
              'https://watchctv.github.io/SmartNews/feed.xml'
          )

          with open('feed.xml', 'w', encoding='utf-8') as f:
              f.write(xml_string)

          print(f"\n✓ Feed created with {cdata_count} CDATA sections")
          print(f"✓ Output size: {len(xml_string):,} bytes")
          EOF

      - name: Verify logo in feed
        run: |
          echo "=== Checking for logo in feed ==="
          grep '<snf:logo>' feed.xml && echo "✓ Logo found" || echo "✗ Logo NOT found"
          echo ""
          echo "=== Logo content ==="
          grep -A 1 '<snf:logo>' feed.xml || echo "No logo to display"

      - name: Check for changes
        id: changes
        run: |
          git diff --quiet feed.xml || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit and push feed
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add feed.xml
          git commit -m "Update RSS feed $(date '+%Y-%m-%d %H:%M:%S')"
          git pull --rebase origin main
          git push origin main
