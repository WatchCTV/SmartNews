name: Build SmartNews Feed

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build SmartNews Feed
        run: |
          pip install requests lxml beautifulsoup4

          python3 <<'EOF'
          import requests, re, html, unicodedata
          from urllib.parse import urlsplit, urlunsplit, quote
          from lxml import etree
          from bs4 import BeautifulSoup

          SOURCE_URL = 'https://rss.app/feeds/PnXLTXpDQSdLv1cb.xml'
          SELF_URL   = 'https://watchctv.github.io/SmartNews/feed.xml'
          LOGO_URL   = 'https://raw.githubusercontent.com/WatchCTV/SmartNews/main/CableTV.com%20RSS%20Logo%20Header.png'

          def sanitize_url(u: str) -> str | None:
              if not u:
                  return None
              u = unicodedata.normalize('NFKC', u.strip())
              u = u.replace('–', '-').replace('—', '-').replace('−', '-')
              if u.startswith('//'):
                  u = 'https:' + u
              if u.startswith('/'):
                  u = 'https://www.cabletv.com' + u
              parts = urlsplit(u)
              clean_path = quote(parts.path)
              return urlunsplit((parts.scheme, parts.netloc, clean_path, parts.query, parts.fragment))

          # Fetch source feed
          xml = requests.get(SOURCE_URL, timeout=30).text
          soup = BeautifulSoup(xml, 'xml')

          # Build RSS root with namespaces
          rss = etree.Element('rss', version='2.0',
              nsmap={
                  'content': 'http://purl.org/rss/1.0/modules/content/',
                  'wfw': 'http://wellformedweb.org/CommentAPI/',
                  'dc': 'http://purl.org/dc/elements/1.1/',
                  'atom': 'http://www.w3.org/2005/Atom',
                  'sy': 'http://purl.org/rss/1.0/modules/syndication/',
                  'slash': 'http://purl.org/rss/1.0/modules/slash/',
                  'media': 'http://search.yahoo.com/mrss/',
                  'snf': 'http://www.smartnews.be/snf'
              })

          ch = etree.SubElement(rss, 'channel')
          etree.SubElement(ch, 'title').text = soup.title.text if soup.title else "Entertainment News"
          etree.SubElement(ch, 'link').text = "https://www.cabletv.com/blog/category/entertainment"
          etree.SubElement(ch, 'description').text = "Let's start watching! CableTV.com keeps you informed of all entertainment news."

          # snf:logo
          snf_logo = etree.SubElement(ch, '{http://www.smartnews.be/snf}logo')
          etree.SubElement(snf_logo, 'url').text = LOGO_URL

          # atom self link
          atom_link = etree.SubElement(ch, '{http://www.w3.org/2005/Atom}link')
          atom_link.set('href', SELF_URL)
          atom_link.set('rel', 'self')
          atom_link.set('type', 'application/rss+xml')

          # Items
          for item in soup.find_all('item'):
              it = etree.SubElement(ch, 'item')

              title = item.title.text if item.title else "Untitled"
              link = item.link.text if item.link else ""
              desc_html = item.description.text if item.description else ""
              desc_clean = html.unescape(desc_html)

              etree.SubElement(it, 'title').text = title
              etree.SubElement(it, 'link').text = link
              etree.SubElement(it, 'guid').text = item.guid.text if item.guid else link
              etree.SubElement(it, 'pubDate').text = item.pubDate.text if item.pubDate else ""

              # Author (dc:creator) with fallback
              if item.find('dc:creator'):
                  author = item.find('dc:creator').text
              elif item.find('author'):
                  author = item.find('author').text
              else:
                  author = "CableTV.com Staff"
              etree.SubElement(it, '{http://purl.org/dc/elements/1.1/}creator').text = author

              # content:encoded (CDATA)
              etree.SubElement(it, '{http://purl.org/rss/1.0/modules/content/}encoded').text = etree.CDATA(desc_clean)

              # media:thumbnail from first <img>
              img_match = re.search(r'<img[^>]+src="([^"]+)"', desc_html)
              if img_match:
                  thumb_url = sanitize_url(img_match.group(1))
                  if thumb_url:
                      etree.SubElement(it, '{http://search.yahoo.com/mrss/}thumbnail', url=thumb_url)

              # --- THE ONLY CHANGE: single-line CDATA for snf:analytics ---
              snf_analytics = etree.SubElement(it, '{http://www.smartnews.be/snf}analytics')
              snf_analytics.text = etree.CDATA("https://analytics.smartnews.com/track?u={snf_url}")
              # -----------------------------------------------------------

          # Write out
          xml_str = etree.tostring(rss, pretty_print=True, xml_declaration=True, encoding='UTF-8')
          with open('feed.xml', 'wb') as f:
              f.write(xml_str)
          EOF

      - name: Commit and push feed
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add feed.xml
          git commit -m "Auto-update feed.xml" || echo "No changes to commit"
          git push
